# -*- coding: utf-8 -*-
"""Копия блокнота "Homework_Концепции_ML.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VDXXCOJome9imq1-NP0gkXGZX8U87CdV

# Основные концепции Machine Learning. Домашняя работа
"""

### Тут нужно сделать импорты всех необходимых библиотек ###

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_text
matplotlib.rc("font", size=18)

### Здесь требуется загрузить датасет phones.csv ###

df = pd.read_csv("1.8_phones.csv")
df.head(7)

### Опционально: используя matplotlib, можно сделать визуализацию загруженного датасета ###

fig = plt.figure(figsize=(10, 10))
ax = plt.axes()
ax.scatter(df["disk"], df["price"], s=100)
plt.show()

"""Задание 1: обучить модель регрессии"""

### Тут нужно выгрузить в соответствующие переменные выбранные признаки ###
# X =
# y =

### Здесь следует запустить процесс обучения ###
### и продемонстрировать работоспобность обученной модели ###

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
df = pd.read_csv("1.8_phones.csv")
X = df[['disk']]
y = df['price']
reg = LinearRegression().fit(X, y)
[b] = reg.coef_
a = reg.intercept_
def reg_prediction(disk):
    return a + b * disk
    reg_prediction(X.disk[0])
    reg.predict(X[0:1])[0]
    fig = plt.figure(figsize=(10, 10))
ax = plt.axes()
ax.scatter(df["disk"], df["price"], s=100)
ax.plot([X.disk.min(), X.disk.max()], [reg_prediction(X.disk.min()), reg_prediction(X.disk.max())], c="red")
plt.show()

"""Задание 2: обучить модель классификации"""

### Тут нужно выгрузить в соответствующие переменные выбранные признаки ###
# X =
# y =

### Здесь следует запустить процесс обучения ###
### и продемонстрировать работоспобность обученной модели ###

import numpy as np
import pandas as pd
df = pd.read_csv("1.8_phones.csv")
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.tree import export_text
X = df[["disk", "year"]]
y = df["price"]
cl = DecisionTreeClassifier().fit(X, y)
print(export_text(cl))

cl.predict(X[7:8])[0], y[7]

"""Задание 3: обучить модель кластеризации"""

### Тут нужно выгрузить в соответствующие переменные выбранные признаки ###
# X =

### Здесь следует запустить процесс обучения ###
### и продемонстрировать работоспобность обученной модели ###

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
matplotlib.rc("font", size=18)
df = pd.read_csv("1.8_phones.csv")
df.head(7)

fig = plt.figure(figsize=(10, 10))
markers = {"Android": "o", "iOS": "v"}
for d, p, o in zip(df.disk, df.price, df.os):
    plt.scatter(d, p, s=250, marker=markers[o])
plt.show()

from sklearn.cluster import KMeans
X = df[["disk", "price"]]
clust = KMeans(n_clusters=2).fit(X)
[c1, c2] = clust.cluster_centers_
clust.cluster_centers_

fig = plt.figure(figsize=(10, 10))
markers = {"Android": "o", "iOS": "v"}
for d, p, o in zip(df.disk, df.price, df.os):
    plt.scatter(d, p, s=250, marker=markers[o])
plt.scatter(c1[0], c1[1], s=250, marker="x", c="black")
plt.scatter(c1[0], c1[1], s=250 * 1e2, c="black", alpha=0.1)

plt.scatter(c2[0], c2[1], s=250, marker="x", c="black")
plt.scatter(c2[0], c2[1], s=250 * 1e2, c="black", alpha=0.1)

plt.show()